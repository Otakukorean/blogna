// schema.prisma
generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider             = "postgres"
  url                  = env("DATABASE_URL")

}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password String?
  accounts      Account[]
  sessions      Session[]
  roll          Role           @default(USER)
  Post          Post[]
  Comment       Comment[]
  Likes         Likes[]
  followers     Follows[]      @relation("following")
  following     Follows[]      @relation("follower")
  sender        Notification[] @relation("sender")
  reciver       Notification[] @relation("reciver")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String?
  provider          String
  providerAccountId String
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String?
  sessionToken String   @unique
  accessToken  String?
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Post {
  id           String         @id @default(cuid())
  title        String         @db.VarChar(255)
  createdAt    DateTime       @default(now()) @db.Timestamp(6)
  content      String         @db.Text
  image        String
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  Comment      Comment[]
  Likes        Likes[]
  Notification Notification[]
}

model Comment {
  id        String    @id @default(cuid())
  message   String
  postId    String
  userId    String
  createdAt DateTime  @default(now())
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])
  Children  Comment[] @relation("Comment_Children")
  parent    Comment?  @relation("Comment_Children", fields: [parent_id], references: [id])
  parent_id String?
}

model Likes {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
}

model Follows {
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now()) @db.Timestamp(6)

  @@id([followerId, followingId])
}

model Notification {
    id        String @id   @default(cuid())

  type      String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?
  sender    User     @relation("sender", fields: [senderId], references: [id])
  senderId  String
  reciver   User     @relation("reciver", fields: [reciverId], references: [id])
  reciverId String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  isRead    Boolean  @default(false)


}

enum Role {
  CEO
  ADMIN
  USER
}


